* RTDM
** Tranzakció generátor
*** Tranzakció
 accountNumber;
 accountType;
 merchantId;
 merchantType;
 transactionId;
 amount;
 currency;
 isCardPresent;
 latitude;
 longitude;
 ipAddress;
 transactionTimeStamp;

*** Merchant
String merchantId;
String merchantType;
GeoPoint location;
** Fájlok HDFS-re
su hdfs
cd

hdfs dfs -mkdir /demo/rtdm
hdfs dfs -mkdir /demo/rtdm/data

# Host to Sandbox
scp -P 2222 *.csv  root@sandbox-hdp.hortonworks.com:/tmp/

# Sandbox to HDFS
hdfs dfs -put /tmp/*.csv /demo/rtdm/data
hdfs dfs -ls /demo/rtdm/data

# Sandboxon saját helyre inkább, HDFS nem trivi...
mkdir /var/local/rtdm
mkdir /var/local/rtdm/data
cp /tmp/cards.csv /tmp/customer.csv /tmp/transactions.csv  /var/local/rtdm/data/
chmod 777 /var/local/rtdm/ /var/local/rtdm/data/
chmod 666 /var/local/rtdm/data/*.csv
ls -al /var/local/rtdm/data/
mkdir /var/local/rtdm/output
chmod 777 /var/local/rtdm/output
** NiFi Flow, fájl feldolgozás
Generate Card Transaction data via Data Seed based on Card API
GetFile, Input Directory, Keep Source File
Control Rate, Rate Control: flowfile count, Maximum Rate, Time Duration
UpdateAttribute, filename: transaction-data-${UUID()}.xml
PutFile Directory
Output Port, RawCardTransactions


*** Update Attr
filename: transactions-${uuid}.csv
schema.name: transaction

*** Service Config, AVRO Schema
https://community.hortonworks.com/articles/147198/using-apache-nifi-to-validate-records-adhere-to-a.html
https://avro.apache.org/docs/1.8.1/spec.html
https://blogs.apache.org/nifi/entry/record-oriented-data-with-nifi
https://nifi.apache.org/docs.html
**** Példa
{
  "name": "recordFormatName",
  "namespace": "nifi.examples",
  "type": "record",
  "fields": [
    { "name": "id", "type": "int" },
    { "name": "firstName", "type": "string" },
    { "name": "lastName", "type": "string" },
    { "name": "email", "type": "string" },
    { "name": "gender", "type": "string" }
  ]
}
**** Első próba
{
  "name": "transactionRecord",
  "type": "record",
  "fields": [
    { "name": "idx", "type": "int" },
    { "name": "accountNumber", "type": "string" },
    { "name": "accountType", "type": "string" },
    { "name": "merchantId", "type": "int" },
    { "name": "merchantType", "type": "string" },
    { "name": "transactionId", "type": "long" },
    { "name": "amount", "type": "int" },
    { "name": "currency", "type": "string" },
    { "name": "isCardPresent", "type": "string" },
    { "name": "latitude", "type": "float" },
    { "name": "longitude", "type": "float" },
    { "name": "ipAddress", "type": "string" },
    { "name": "transactionTimeStamp", "type": "float" }
  ]
}

ParseBigDecimal, ParseBool, ParseChar, ParseDate, ParseDouble, ParseInt, ParseLong, Optional, DMinMax, Equals, ForbidSubStr, LMinMax, NotNull, Null, RequireHashCode, RequireSubStr, Strlen, StrMinMax, StrNotNullOrEmpty, 

ParseInt,StrNotNullOrEmpty,StrNotNullOrEmpty,ParseInt,StrNotNullOrEmpty,ParseBigDecimal,ParseInt,StrNotNullOrEmpty,StrNotNullOrEmpty,ParseDouble,ParseDouble,Null,ParseDouble

**** Második próba
{
  "name": "transactionRecord",
  "type": "record",
  "fields": [
    { "name": "idx", "type": "long" },
    { "name": "accountNumber", "type": "string" },
    { "name": "accountType", "type": "string" },
    { "name": "merchantId", "type": "string" },
    { "name": "merchantType", "type": "string" },
    { "name": "transactionId", "type": "string" },
    { "name": "amount", "type": "string" },
    { "name": "currency", "type": "string" },
    { "name": "isCardPresent", "type": "string" },
    { "name": "transactionTimeStamp", "type": "string" }
  ]
}

**** Attributumok
$.[0].accountNumber
$.[0].accountType
$.[0].merchantId
$.[0].merchantType 
$.[0].transactionId
$.[0].amount
*** Sima NiFi fájl feldolgozás
Azért, hogy ne egyszerűbb legyen, kevés rekordot kap:
cat nifi/work/transactions.csv | head > nifi/data/transactions.csv


*** Execute SQL
**** Sima select
SELECT * from bank_card WHERE Card = '${accountNumber}';

**** Minden lényeges adat
select 
  customer.Account, customer.Age, customer.Gender,
  customer.Name, customer.Tel
from bank_card left join customer 
on ( customer.Account  = bank_card.Account ) 
where bank_card.Card = '6796 8296 4350 6601';
**** És Merchant is
select 
  customer.Account, customer.Age, customer.Gender,
  customer.Name, customer.Tel,
  merchant.name, merchant.lat, merchant.long
from bank_card 
left join customer 
 on ( customer.Account  = bank_card.Account )
join merchant
where bank_card.Card = '6796 8296 4350 6601'
  and merchant.id = 1001;

'${accountNumber}'
${merchantId}

*** AVRO to JSON
Nem kell séma, ha az AVRO fájlban van...
{"type":"record",
 "name":"customer",
 "namespace":"any.data",
 "fields":[{"name":"Account","type":["null","string"]},
           {"name":"Age","type":["null","int"]},
	   {"name":"Gender","type":["null","string"]},
	   {"name":"Name","type":["null","string"]},
	   {"name":"Tel","type":["null","string"]},
	   {"name":"name","type":["null","string"]},
	   {"name":"lat","type":["null","float"]},
	   {"name":"long","type":["null","float"]}]}

*** EvalJSONPath
$.[0].Account
$.[0].Age
$.[0].Gender
$.[0].Name
$.[0].Tel
$.[0].name
$.[0].lat
$.[0].long

*** Attributesto JSON
accountNumber,accountType,merchantId,merchantType,transactionId,amount
Account,Age,Gender,Name,Tel,name,lat,long

* Doksik
** CSV to JSON
Első cikk: https://community.hortonworks.com/articles/115311/convert-csv-to-json-avro-xml-using-convertrecord-p.html
RandomUser, jó... https://randomuser.me/

*** Update Attribute
schema.name: users

*** AvroSchemaRegistry
{
  "type": "record",
  "name": "UserRecord",
  "fields" : [
    {"name": "id", "type": "long"},
    {"name": "title", "type": ["null", "string"]},
    {"name": "first", "type": ["null", "string"]},
    {"name": "last", "type": ["null", "string"]},
    {"name": "street", "type": ["null", "string"]},
    {"name": "city", "type": ["null", "string"]},
    {"name": "state", "type": ["null", "string"]},
    {"name": "zip", "type": ["null", "string"]},
    {"name": "gender", "type": ["null", "string"]},
    {"name": "email", "type": ["null", "string"]},
    {"name": "username", "type": ["null", "string"]},
    {"name": "password", "type": ["null", "string"]},
    {"name": "phone", "type": ["null", "string"]},
    {"name": "cell", "type": ["null", "string"]},
    {"name": "ssn", "type": ["null", "string"]},
    {"name": "date_of_birth", "type": ["null", "string"]},
    {"name": "reg_date", "type": ["null", "string"]},
    {"name": "large", "type": ["null", "string"]},
    {"name": "medium", "type": ["null", "string"]},
    {"name": "thumbnail", "type": ["null", "string"]},
    {"name": "version", "type": ["null", "string"]},
    {"name": "nationality", "type": ["null", "string"]}
  ]
}
*** CSV Reader
Schema Access Strategy: Use 'Schema Name' property
Schema Registry: AvroSchema Registry
Schema name:${schema.name}
Schema Text:${avro.schema}
Csv Format: Custom format
Value Separator:;
Treat First Line as Header: true

*** JsonRecordSetWriter
Schema Write Strategy: Set 'schema.name' Attribute
Schema Access Strategy: Use 'Schema Name' property
Schema Registry, Name, text...

* MySQL
** Install: Digital Ocean
https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04

sudo apt update
sudo apt install mysql-server
mysql_secure_installation
Root: Kiskacsa123

systemctl status mysql.service

mysqladmin -p -u root version

** Create Db
https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql

mysql -p -u root 

CREATE USER 'rtdm'@'localhost' IDENTIFIED BY 'rtdm123Kecske';
CREATE DATABASE rtdm CHARACTER SET utf8 COLLATE utf8_general_ci;
GRANT ALL PRIVILEGES ON rtdm.* TO rtdm@localhost;
FLUSH PRIVILEGES;

SELECT DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME
FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'rtdm';
** Write DataFrame to MySQL
https://stackoverflow.com/questions/30631325/writing-to-mysql-database-with-pandas-using-sqlalchemy-to-sql


import pandas as pd
import mysql.connector
from sqlalchemy import create_engine

engine = create_engine('mysql+mysqlconnector://[user]:[pass]@[host]:[port]/[schema]', echo=False)
data.to_sql(name='sample_table2', con=engine, if_exists = 'append', index=False)

Primary key:
https://stackoverflow.com/questions/30867390/python-pandas-to-sql-how-to-create-a-table-with-a-primary-key

DataType:
http://docs.sqlalchemy.org/en/latest/core/type_basics.html
** Avro Python install
http://avro.apache.org/docs/current/gettingstartedpython.html
tar xvfz avro-python3-1.8.2.tar.gz
python setup.py install

* Clipboard
https://stackoverflow.com/questions/45172345/nifi-splitjson-and-executesql

** Database Extract with NiFi
https://www.batchiq.com/database-extract-with-nifi.html
Van logolás is.

** Extract JSON to attribute
https://community.hortonworks.com/questions/154195/nifi-extract-attributes-from-json-as-argument-in-i.html

Evaluate JSON Path

** SQL összerakása Attributum alapján

 https://community.hortonworks.com/questions/110791/nifi-processor-to-dynamically-create-sql-query-fro.html

Evaluate JSON Path + Execute Query
$.[0].accountNumber

DBCP hogyan:
https://community.hortonworks.com/questions/75767/how-to-configure-and-connect-mysql-with-nifi-and-p.html

sudo apt install libmysql-java
/usr/share/java/mysql.jar

    SELECT	
    		'${ID}' as ID
    		,'${DeviceID}' as DeviceID
    		,'${LogDate}' as LogDate
    		,'${Latitude}' as Latitude
    		,'${Longitude}' as Longitude
    		,'OK' as OK
    FROM	[Device] 
    WHERE	DeviceID = '${DeviceID}'

*** AVRO to JSON
{"type":"record",
"name":"NiFi_ExecuteSQL_Record",
"namespace":"any.data",
"fields":[{"name":"Account","type":["null","string"]}]}

** NiFI linkek
https://github.com/jfrazee/awesome-nifi

** Python példa
https://community.hortonworks.com/articles/35568/python-script-in-nifi.html

https://gist.github.com/ijokarumawak/1df6d34cd1b2861eb6b7432ee7245ccd

** GUI modeler integration
Nagyjából nincs...
https://docs.microsoft.com/en-us/machine-learning-server/python-reference/microsoftml/rx-predict
PMML
https://marketplace.rapidminer.com/UpdateServer/faces/product_details.xhtml?productId=rmx_pmml
* GIT
** MCH
 muszi@ns.macrohard.hu:/home/muszi/git/kurt.git

** Github
git@github.com:cogitoergoread/rtdm.git
** Move repo
git clone --bare   muszi@ns.macrohard.hu:/home/muszi/git/rtdm.git
cd rtdm.git
git push --mirror git@github.com:cogitoergoread/rtdm.git

git clone  git@github.com:cogitoergoread/rtdm.git
